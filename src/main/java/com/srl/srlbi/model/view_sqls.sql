CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `srl`.`srl_banking` AS select `a`.`id` AS `id`,`a`.`audit_created_at` AS `audit_created_at`,`a`.`debit_credit` AS `debit_credit`,`a`.`reference_no` AS `reference_no`,`a`.`runnig_balance` AS `runnig_balance`,`a`.`transaction_amount` AS `transaction_amount`,`a`.`transaction_date` AS `transaction_date`,`a`.`transaction_description` AS `transaction_description`,`a`.`audit_updated_at` AS `audit_updated_at`,`a`.`value_date` AS `value_date`,(case when (`a`.`debit_credit` = 'D') then (-(1) * `a`.`transaction_amount`) else `a`.`transaction_amount` end) AS `trans_amt`,str_to_date(`a`.`transaction_date`,'%d/%m/%Y') AS `trans_date` from `srl`.`t_banking` `a` where ((not((`a`.`transaction_description` like 'Sweep%'))) and (`a`.`transaction_description` <> '0407335000000030')) order by str_to_date(`a`.`transaction_date`,'%d/%m/%Y'),`a`.`id` desc;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `srl`.`srl_bill` AS select uuid_short() AS `id`,`a`.`bill_date` AS `bill_date`,`a`.`bill_number` AS `bill_number`,`a`.`cf_cust_wo` AS `cust_wo`,`a`.`cf_cust_invoice` AS `invoice`,`a`.`vendor_name` AS `vendor_name`,`a`.`cf_vehicle_no` AS `vehicle_number`,`a`.`quantity` AS `quantity`,`a`.`rate` AS `rate`,`a`.`sub_total` AS `subtotal`,`a`.`adjustment` AS `adjustment`,`a`.`total` AS `total`,`a`.`item_name` AS `item`,`a`.`purchase_order` AS `srl_po` from `srl`.`t_bill` `a`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `srl`.`srl_customer_payment` AS select uuid_short() AS `id`,`a`.`date` AS `paid_date`,`a`.`invoice_number` AS `invoice`,`a`.`invoice_amount` AS `paid_amount`,`a`.`amount` AS `check_amount` from `srl`.`t_customer_payment` `a`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `srl`.`srl_invoice` AS select uuid_short() AS `id`,`a`.`invoice_date` AS `invoice_date`,`a`.`invoice_number` AS `invoice`,`a`.`purchase_order` AS `cust_wo`,`a`.`item_name` AS `item`,`a`.`quantity` AS `quantity`,`a`.`item_cf_date` AS `item_date`,`a`.`item_cf_lorry_no` AS `vehicle_number`,`a`.`item_cf_receipt_no` AS `bill_number`,`a`.`item_price` AS `item_price`,`a`.`item_tax_amount` AS `tax_amount`,`a`.`item_total` AS `item_total`,`a`.`adjustment` AS `adjustments`,`a`.`total` AS `total`,`a`.`notes` AS `notes` from `srl`.`t_invoice` `a` where (not((`a`.`invoice_number` like 'DU%')));

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `srl`.`srl_vendor_payment` AS select uuid_short() AS `id`,`a`.`date` AS `paid_date`,`a`.`vendor_name` AS `vendor_name`,`a`.`bill_number` AS `bill_number`,`a`.`amount` AS `bill_amount`,`a`.`bill_amount` AS `paid_amount`,`a`.`paid_through` AS `paid_mode` from `srl`.`t_vendor_payment` `a`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `srl`.`view_bank_balance` AS select uuid_short() AS `id`,max(`srl_banking`.`trans_date`) AS `till_date`,round(sum(`srl_banking`.`trans_amt`),2) AS `bank_balance`,sum((case when (`srl_banking`.`trans_amt` < 0) then `srl_banking`.`trans_amt` else 0 end)) AS `debit_amt`,sum((case when (`srl_banking`.`trans_amt` > 0) then `srl_banking`.`trans_amt` else 0 end)) AS `credit_amt` from `srl`.`srl_banking`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `srl`.`view_profits` AS select uuid_short() AS `id`,monthname(`b`.`invoice_date`) AS `sales_month`,concat(min(`a`.`invoice`),' to ',max(`a`.`invoice`)) AS `invoices`,concat(min(`a`.`from_rmr`),' to ',max(`a`.`to_rmr`)) AS `RMRs`,concat(min(`b`.`invoice_date`),' to ',max(`b`.`invoice_date`)) AS `inv_dates`,avg(`a`.`rate`) AS `purchase_rate`,sum(`a`.`quantity`) AS `purchase_quantity`,sum(`a`.`paid_amount`) AS `purchase_amount_paid`,sum(`b`.`quantity`) AS `sales_quantity`,round(sum(`b`.`item_total`),2) AS `sales_amount_total`,sum(`b`.`gst`) AS `sales_gst`,round(sum((`b`.`item_total` - `a`.`paid_amount`)),2) AS `sales_profit`,round(sum(`b`.`adjustments`),2) AS `security_deposit`,(sum((`b`.`item_total` - `a`.`paid_amount`)) + round(sum(`b`.`adjustments`),2)) AS `net_profit`,sum(`b`.`total`) AS `amount_to_be_received`,sum(`b`.`paid_amount`) AS `actual_amount_received`,sum(`b`.`over_due_amount`) AS `overdue_amount` from (`srl`.`view_purchases` `a` join `srl`.`view_sales` `b` on((`a`.`invoice` = `b`.`invoice`))) where (`b`.`check_amount` is not null) group by monthname(`b`.`invoice_date`);

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `srl`.`view_purchase_payments` AS select uuid_short() AS `id`,`srl_vendor_payment`.`bill_number` AS `bill_number`,round(sum(`srl_vendor_payment`.`paid_amount`),2) AS `paid_amount` from `srl`.`srl_vendor_payment` group by `srl_vendor_payment`.`bill_number`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `srl`.`view_purchases` AS select uuid_short() AS `id`,`a`.`cust_wo` AS `cust_wo`,`a`.`invoice` AS `invoice`,round(sum(`a`.`quantity`),2) AS `quantity`,round(sum(`a`.`adjustment`),2) AS `adjustment`,round(sum(`b`.`paid_amount`),2) AS `paid_amount`,round(avg(`a`.`rate`),2) AS `rate`,concat(min(`a`.`bill_number`),' to ',max(`a`.`bill_number`)) AS `RMRs`,min(`a`.`bill_number`) AS `from_rmr`,max(`a`.`bill_number`) AS `to_rmr` from (`srl`.`srl_bill` `a` join `srl`.`view_purchase_payments` `b`) where (`a`.`bill_number` = `b`.`bill_number`) group by `a`.`cust_wo`,`a`.`invoice` order by `a`.`cust_wo`,`a`.`invoice`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `srl`.`view_quantity_sold` AS select uuid_short() AS `id`,`a`.`cust_wo` AS `cust_wo`,concat(min(`a`.`invoice`),' to ',max(`a`.`invoice`)) AS `invoices`,round(sum(`a`.`quantity`),2) AS `qty_sold` from `srl`.`srl_invoice` `a` group by `a`.`cust_wo`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `srl`.`view_sales` AS select uuid_short() AS `id`,`a`.`invoice_date` AS `invoice_date`,`a`.`invoice` AS `invoice`,`a`.`cust_wo` AS `cust_wo`,`a`.`item_total` AS `item_total`,`a`.`gst` AS `gst`,`a`.`adjustments` AS `adjustments`,`a`.`total` AS `total`,`a`.`quantity` AS `quantity`,`b`.`check_amount` AS `check_amount`,`b`.`paid_amount` AS `paid_amount`,(`b`.`paid_amount` - `a`.`total`) AS `over_due_amount` from (`srl`.`view_sales_invoice` `a` left join `srl`.`srl_customer_payment` `b` on((`a`.`invoice` = `b`.`invoice`)));

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `srl`.`view_sales_invoice` AS select uuid_short() AS `id`,`srl_invoice`.`invoice_date` AS `invoice_date`,`srl_invoice`.`invoice` AS `invoice`,`srl_invoice`.`cust_wo` AS `cust_wo`,round(sum(`srl_invoice`.`quantity`),2) AS `quantity`,round(sum(`srl_invoice`.`item_total`),2) AS `item_total`,round(sum(`srl_invoice`.`tax_amount`),2) AS `gst`,`srl_invoice`.`adjustments` AS `adjustments`,`srl_invoice`.`total` AS `total` from `srl`.`srl_invoice` group by `srl_invoice`.`invoice_date`,`srl_invoice`.`invoice`,`srl_invoice`.`cust_wo`,`srl_invoice`.`adjustments`,`srl_invoice`.`total`;


